#! /usr/bin/env python3
# -*- coding: utf-8 -*-
import gettext
import sys
import requests
import base64
import time
from ikabot.helpers.pedirInfo import read, enter
from ikabot.helpers.gui import *
from ikabot.config import *
from ikabot.helpers.process import updateProcessList, run
from ikabot.helpers.botComm import *

t = gettext.translation('killTasks', localedir, languages=languages, fallback=True)
_ = t.gettext

decaptcha_test_pictures = [
    {'ground_truth': 'WURY5G', 'picture': ''},
    {'ground_truth': 'XEPAMVW', 'picture': ''},
    {'ground_truth': 'T2YE3LV', 'picture': ''},
    {'ground_truth': 'GPJPYB', 'picture': ''},
]


def decaptchaConf(session, event, stdin_fd, predetermined_input):
    """
    Parameters
    ----------
    session : ikabot.web.session.Session
    event : multiprocessing.Event
    stdin_fd: int
    predetermined_input : multiprocessing.managers.SyncManager.list
    """
    sys.stdin = os.fdopen(stdin_fd)
    config.predetermined_input = predetermined_input
    banner()
    try:
        session_data = session.getSessionData()

        if 'decaptcha' not in session_data:
            session_data['decaptcha'] = {'name': 'default', 'endpoint': 'default', 'relevant_data': {}}
            session.setSessionData(session_data)

        if session_data['decaptcha']['name'] == 'default':
            print('You are currently using the default decaptcha service')
        elif session_data['decaptcha']['name'] == 'custom':
            print('You are currently using your custom decaptcha service')
            print('Endpoint : {}'.format(session_data['decaptcha']['endpoint']))
        elif session_data['decaptcha']['name'] == '9kw.eu':
            print('You are currently using 9kw.eu as your decaptcha service')
            print("API key : {}".format(session_data['decaptcha']['relevant_data']['apiKey']))
        elif session_data['decaptcha']['name'] == 'telegram':
            print('You are currently using Telegram as your decaptcha service')
            print("Telegram ID : {}".format(session_data['shared']['telegram']['chatId']))
        print()
        print('(0) Exit')
        print('(1) Default')
        print('(2) Custom')
        print('(3) 9kw.eu')
        print('(4) Telegram')

        action = read(min=0, max=4, digit=True)

        if action == 0:
            event.set()
            return

        elif action == 1:
            banner()
            session_data['decaptcha'] = {'name': 'default', 'endpoint': 'default', 'relevant_data': {}}
            session.setSessionData(session_data)
            print('Default decaptcha service set as decaptcha service!')
            enter()
            event.set()
            return

        elif action == 2:
            while(True):
                banner()
                endpoint = read(msg='Enter your custom endpoint : ')
                if 'http' not in endpoint:
                    print('Invalid endpoint!')
                    enter()
                    event.set()
                    return
                session_data['decaptcha']['name'] = 'custom'
                session_data['decaptcha']['endpoint'] = endpoint
                print('Endpoint {} set! Remember, the picture will be sent via a POST request under the `upload_file` parameter'.format(endpoint))
                print('Do you want to test this newly-set custom endpoint?(y|n)')
                test_bool = read(values=['y', 'Y', 'n', 'N'])
                if (test_bool.lower() == 'n'):
                    session.setSessionData(session_data)
                    event.set()
                    return
                for test in decaptcha_test_pictures:
                    if testCustomDecaptcha(test['ground_truth'], base64.b64decode(test['picture']), endpoint):
                        session.setSessionData(session_data)
                        print('Custom decaptcha passed at least one test, good enough!')
                        enter()
                        event.set()
                        return
                print('All tests failed. Do you wish to set the endpoint again?')
                input = read(values=['y', 'Y', 'n', 'N'])
                if input.lower() == 'y':
                    continue
                else:
                    event.set()
                    return

        elif action == 3:
            banner()
            apiKey_9kw = read(msg='Enter your 9kw.eu API key : ')
            response = requests.get("https://www.9kw.eu/index.cgi?action=usercaptchaguthaben&apikey={}".format(apiKey_9kw)).text
            if 'API key not found' in response:
                print("{}Failure!{} Wrong API key!".format(bcolors.RED, bcolors.ENDC))
                enter()
                event.set()
                return
            else:
                session_data['decaptcha']['name'] = '9kw.eu'
                session_data['decaptcha']['endpoint'] = 'https://www.9kw.eu/index.cgi'
                session_data['decaptcha']['relevant_data'] = {'apiKey': apiKey_9kw}
                print("{}Success!{} You currently have {} credits".format(bcolors.GREEN, bcolors.ENDC, response))
                enter()
                session.setSessionData(session_data)
                event.set()
                return

        elif action == 4:
            banner()
            if checkTelegramData(session) is False:
                print('Please first set the Telegram data')
                enter()
                event.set()
                return
            session_data['decaptcha']['name'] = 'telegram'
            print('Do you wish to do a test?(y|n)')
            test = read(values=['y', 'Y', 'n', 'N'])
            if test.lower() == 'y':
                print('A captcha has been sent to you over Telegram. Please open the picture fully and respond on Telegram')
                sendToBot(session, 'Please resolve the captcha', Photo=base64.b64decode(decaptcha_test_pictures[0]['picture']))
                captcha_time = time.time()
                while(True):
                    response = getUserResponse(session, fullResponse=True)
                    if response == []:
                        time.sleep(5)
                        continue
                    response = response[-1]
                    if response['date'] < captcha_time:
                        time.sleep(5)
                        continue
                    else:
                        captcha = response['text']
                        break
                    time.sleep(5)
                if captcha.lower() == decaptcha_test_pictures[0]['ground_truth'].lower():
                    print('{}Success!{} Captcha is correct!'.format(bcolors.GREEN, bcolors.ENDC))
                    enter()
                    session.setSessionData(session_data)
                    event.set()
                    return
                else:
                    print('{}Failure!{} Captcha is incorrect, try again!'.format(bcolors.GREEN, bcolors.ENDC))
                    enter()
                    event.set()
                    return
            else:
                print('You will now recieve the piracy captcha over Telegram!')
                session.setSessionData(session_data)
                enter()
                event.set()
                return
    except KeyboardInterrupt:
        event.set()
        return


def testCustomDecaptcha(ground_truth, picture, address):

    try:
        files = {'upload_file': picture}
        captcha = requests.post('{0}'.format(address), files=files).text
        if captcha.lower() != ground_truth.lower():  # Ikariam's captcha is not case-sensitive
            return False
        return True
    except Exception:
        return False
